name: CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Check out the code
        uses: actions/checkout@v4

      # Step 2: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      # Step 3: Cache Gradle dependencies
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # Step 4: Install Android Command-Line Tools Manually
      - name: Install Android Command-Line Tools
        run: |
          mkdir -p $ANDROID_HOME/cmdline-tools
          curl -sSL "https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip" -o cmdline-tools.zip
          unzip -q cmdline-tools.zip -d $ANDROID_HOME/cmdline-tools
          mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
          rm cmdline-tools.zip
        env:
          ANDROID_HOME: /usr/local/lib/android/sdk

      # Step 5: Accept Android SDK Licenses
      - name: Accept Android SDK Licenses
        run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
        env:
          ANDROID_HOME: /usr/local/lib/android/sdk

      # Step 6: Install SDK Packages
      - name: Install SDK Packages
        run: |
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-31"
        env:
          ANDROID_HOME: /usr/local/lib/android/sdk

      # Step 7: Grant Executable Permissions to Gradlew
      # Fixes the "Permission denied" error for the Gradlew script
      - name: Make Gradlew executable
        run: chmod +x ./gradlew

      # Step 8: Build the app
      - name: Build the app
        run: ./gradlew assembleDebug

      # Step 9: Run unit tests
      - name: Run unit tests
        run: ./gradlew test

      # Step 10: Upload test results as artifacts
      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: app/build/test-results/testDebugUnitTest/ # Adjust the path if necessary
          
      # Step 11: Display the test results in GitHub UI (JUnit format)
      - name: Display test results
        if: always()
        run: |
          echo "Test Results"
          cat app/build/test-results/testDebugUnitTest/test-*.xml # Adjust path if necessary
